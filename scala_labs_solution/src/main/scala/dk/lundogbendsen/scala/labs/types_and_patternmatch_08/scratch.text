

  /** To pattern match against `List`, you can also establish a pattern match if you know the exact number of elements in a `List`:
   */
  def againstListsIVPatternMatching(res0: Int) {
    val r = List(1, 2, 3) match {
      case x :: y :: Nil ⇒ y // only matches a list with exactly two items
      case _             ⇒ 0
    }

    r  (res0)
  }

  /** If a pattern is exactly one element longer than a `List`, it extracts the final `Nil`:
   */
  def againstListsVPatternMatching(res0: Boolean) {
    val r = List(1, 2, 3) match {
      case x :: y :: z :: tail ⇒ tail
      case _                   ⇒ 0
    }

    r == Nil  (res0)
  }
}